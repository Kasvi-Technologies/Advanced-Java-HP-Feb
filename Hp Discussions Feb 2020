				Excercise 1 - with out Generics

1. create a Test class

2. Create a List with an implementation of ArrayList

3. add values to List with integers /strings/double ( muliple data type )

4. repeat the list and display the values



Java Generics are a language feature that allows for definition and use of generic types and methods

generics force type safety in java language

Generics add stability to your code by making more of your bugs detectable at compile time.‚Äù

https://github.com/Kasvi-Technologies/Advanced-Java-HP-Feb

		Excercise 2 - With Employee Class as generics


1. Create an Employee class with id, name and salary properties with setter and getter methods..
Note: provide default contructor and parameterized constructor
overide toString method


2. create EmployeeService class with fetchEmployees methods

	public List<Employee> fetchEmployee(){
	
		//1. create List which accepts only  Employee object
		
		2. create 3-4 Employee objects and add to List
		
		3. return the List
		
	
	}


3. Create EmployeeTest class with main method

	Fetch the Employee list and display the Employee object 

					Excercise 3 with Maps
					


							

Enums are used to create constansts and mainly used in validations like If statement/ switch statements

							Enum Excercise


1. create a Enum class called Direction

		a. define NORT, EAST, SOUTH WEST
		b. provide default values along with constructor and variable and getter methods

2. Display all Directions values in test program
	
	
							Junit


1. Write a test method to assert based on the count of employees (fetchEmployees method of EmployeeService is actual)

@BeforeClass
@AfterClass
@Before
@After
@Test
JUnitCore.runClassess

assertArrayEquals()
assertEquals()
assertTrue() + assertFalse()
assertNull() + assertNotNull()
assertSame() + assertNotSame()
	

@RunWith(Suite.class)

@Suite.SuiteClasses({ 
   MyUnitTest.class ,TestJunit.class
})


										Annotations

Annotations will specify meta data. It will not chnage your code

@Override - It will specify that method is overridden from parent class
@Deprecated -
@SupressWarnings

@Retention(RetentionPolicy.RUNTIME)
@Target({ElementType.METHOD, ElementType.FIELD, ElementType.TYPE})
@interface MyAnnotation {

	String name() default "sample";
	String value();
	int age() default 10;
	
	String[] colors();
	
}

Repeatable Annotations

@Schedule(dayOfTheWeek="Mon")
@Schedule(dayOfTheMonth="5")
Public void sendmessages(){

}




@Role(type="Administrator")
@Role(type="HR")
public void deleteEntries(){


}

						Maven
						
It will build our application automatically

Download Apache maven zip 
configure <maven-location>\bin to path environment variable
restart your IDE

from command prompt -. type mvn and enter -> it should not say that mvn command not found








































									




 Result result = JUnitCore.runClasses(TestJunit.class);

 
 
 @Retention(RetentionPolicy.RUNTIME)
 @Target({ElementType.METHOD})
 
 
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	